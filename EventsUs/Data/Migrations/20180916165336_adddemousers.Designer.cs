// <auto-generated />
using System;
using EventsUs.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventsUs.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180916165336_adddemousers")]
    partial class adddemousers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventsUs.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<string>("YoutubeId");

                    b.HasKey("Id");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("EventsUs.Models.FindFriends", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("FindFriends");
                });

            modelBuilder.Entity("EventsUs.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("age");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "admin_ID_123456789", AccessFailedCount = 0, ConcurrencyStamp = "c4c55dd8-cf65-4110-8801-d00747eeb12f", Email = "admin@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "admin@eventus.com", NormalizedUserName = "admin@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEDKuqoPPffoJwfh++A4+IODSd+Y11itgPWPwO9RUOrIy+hrHN+PrZ+A1hicGc6/4iw==", PhoneNumberConfirmed = false, SecurityStamp = "admin@eventus.com", TwoFactorEnabled = false, UserName = "admin", age = 0 },
                        new { Id = "rt_7000", AccessFailedCount = 0, ConcurrencyStamp = "baddaea9-38b4-4350-be1b-9f2578ce8935", Email = "rt_7000@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7000@RaringsTest.com", NormalizedUserName = "rt_7000@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAED3eoLdZJa0Mhz1CmcCWSYzm51US448J2XyeKti6DrqstuXvAThY2KnO3dtXCTy9Qg==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7000@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7000", age = 20 },
                        new { Id = "rt_7001", AccessFailedCount = 0, ConcurrencyStamp = "ffd39fe7-fb33-4452-9846-59f717fa9628", Email = "rt_7001@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7001@RaringsTest.com", NormalizedUserName = "rt_7001@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEE6hfpXkQbii6BV0+BtQLdImr4bnf0xbfyFzXEBR3C0Uv8ZeRYzs32Hsp+y2EFP+xA==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7001@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7001", age = 20 },
                        new { Id = "rt_7002", AccessFailedCount = 0, ConcurrencyStamp = "5c082473-0159-43c3-a67a-5d4bc967b63e", Email = "rt_7002@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7002@RaringsTest.com", NormalizedUserName = "rt_7002@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEEtZUZ7GQUITfCIFeggVQlBTRnP3C4p8ltqvypMyiM9j7V1e/Q70L1d7oytvSH36BA==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7002@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7002", age = 20 },
                        new { Id = "rt_7003", AccessFailedCount = 0, ConcurrencyStamp = "49975d99-a23f-47e6-85fd-09dc880590ff", Email = "rt_7003@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7003@RaringsTest.com", NormalizedUserName = "rt_7003@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEB2XMELuYQwXQwYJMLwQsx8p4SFJ9/coAhZQhdI+NUqhBHQlzY/8qN6sVaax57VrKA==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7003@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7003", age = 20 },
                        new { Id = "rt_7004", AccessFailedCount = 0, ConcurrencyStamp = "62ee07a1-8cc6-4de2-90dd-9ef8633974cf", Email = "rt_7004@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7004@RaringsTest.com", NormalizedUserName = "rt_7004@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEMXVg6m3kFm6mEqi69jwEbB3bKHltEq7Mrw7VnBXSyftt8u5oYqRr6KbnUl7kKPWew==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7004@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7004", age = 20 },
                        new { Id = "rt_7005", AccessFailedCount = 0, ConcurrencyStamp = "f8ad9897-8bec-46a8-9aae-a5bc15ac0b7e", Email = "rt_7005@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7005@RaringsTest.com", NormalizedUserName = "rt_7005@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEO26SOAMZQQQ6jgwLnz6633YHYcRhFi8wRCnstzmjNDid+LaPysWAVRimMbbAcN8lQ==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7005@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7005", age = 20 },
                        new { Id = "rt_7006", AccessFailedCount = 0, ConcurrencyStamp = "48f27f2f-2c22-42f9-8a63-270d7287fa80", Email = "rt_7006@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7006@RaringsTest.com", NormalizedUserName = "rt_7006@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEKkZb/ZP+CLLdOJsBMcAvykBd0f4LJzTGJK3GYeT9UkLMrcA0Wb7KgE+7tUMEJaiyQ==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7006@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7006", age = 20 },
                        new { Id = "rt_7007", AccessFailedCount = 0, ConcurrencyStamp = "db8fa27e-488c-4b41-93c3-d860ed88913a", Email = "rt_7007@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7007@RaringsTest.com", NormalizedUserName = "rt_7007@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEKKZwFyXpMdey1otc6IFSUC5VgukSWhddWHsc+k67e7GFgepMP5diG5qDL+5VDpaCg==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7007@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7007", age = 20 },
                        new { Id = "rt_7008", AccessFailedCount = 0, ConcurrencyStamp = "b58b6e11-38e7-4c8c-8383-1bbd74fa285f", Email = "rt_7008@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7008@RaringsTest.com", NormalizedUserName = "rt_7008@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEMkwXW1luWItugMxdZAnBVXgtgSILDPHSbKw2siYuhbjt050Mp8zfso0EJ3TqzkTGw==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7008@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7008", age = 20 },
                        new { Id = "rt_7009", AccessFailedCount = 0, ConcurrencyStamp = "48f6becf-75eb-415d-b6f1-ddd96cb02c35", Email = "rt_7009@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7009@RaringsTest.com", NormalizedUserName = "rt_7009@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEBRbBRjRaTlhHrV0I0Qiv6Tz2Rh1EnbjtCgBcgxswJ7UNmaixREOzBPPAxIMI5fENA==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7009@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7009", age = 20 },
                        new { Id = "rt_7010", AccessFailedCount = 0, ConcurrencyStamp = "08dce447-5866-4fa7-9085-c97269866786", Email = "rt_7010@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7010@RaringsTest.com", NormalizedUserName = "rt_7010@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEBIM1M9j9Fpb4Ml8nJ2Z43XNgEB1on9v9QM+JLvGhe47ZAILPw7MdaBShPbxQ1zZtw==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7010@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7010", age = 20 },
                        new { Id = "rt_7011", AccessFailedCount = 0, ConcurrencyStamp = "02dc3620-dbd5-4544-8415-991ced8b8b36", Email = "rt_7011@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7011@RaringsTest.com", NormalizedUserName = "rt_7011@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEBSNzmrNSdY2d+3eSTdupZWagNtM2ZGZL8GONWmlcnFREfkuRLwqs+vXba4t+XFevQ==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7011@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7011", age = 20 },
                        new { Id = "rt_7012", AccessFailedCount = 0, ConcurrencyStamp = "0163fcd3-42d4-4a02-a678-58754d711bd7", Email = "rt_7012@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7012@RaringsTest.com", NormalizedUserName = "rt_7012@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEDwEJPsNjb9SpGfyN8C3lb1OMfQxKVqoxanCHxD20w8J8FkiCJalgvdGF8uHlYK6iw==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7012@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7012", age = 20 },
                        new { Id = "rt_7013", AccessFailedCount = 0, ConcurrencyStamp = "aa7640c2-1f91-4da0-84f6-5c215951cf43", Email = "rt_7013@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7013@RaringsTest.com", NormalizedUserName = "rt_7013@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEN59dgsQUjJxR/80HeJwfwMs4siq9NQ8Hrw7hAzilrkjyK+kac7GK6QLXaqAKbQF0A==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7013@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7013", age = 20 },
                        new { Id = "rt_7014", AccessFailedCount = 0, ConcurrencyStamp = "2be8a42a-c742-4c52-83b1-3777f1f94f10", Email = "rt_7014@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7014@RaringsTest.com", NormalizedUserName = "rt_7014@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEGDRUOzj6klH+PvWsElLD3etG5NMIiD8H0i9voY50SbIVy3tE68VUvHayj79y67U+w==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7014@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7014", age = 20 },
                        new { Id = "rt_7015", AccessFailedCount = 0, ConcurrencyStamp = "7fe94851-7d7b-4a18-b243-96714fa94ac5", Email = "rt_7015@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7015@RaringsTest.com", NormalizedUserName = "rt_7015@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAELJRAKlAA66FMGjS9uAT8f23wZXU8P2TH350WVT8yYcMCz299RB2jmU5VGMNjTrG1g==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7015@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7015", age = 20 },
                        new { Id = "rt_7016", AccessFailedCount = 0, ConcurrencyStamp = "d210712c-567a-4f8c-a995-c2458ebf1380", Email = "rt_7016@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7016@RaringsTest.com", NormalizedUserName = "rt_7016@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAELxSyNCTXSBs2atOd8qB7WHa8LKgsqO0UTeHLTvDhBgbC+svEVq4PCR4NUPGWSbNTg==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7016@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7016", age = 20 },
                        new { Id = "rt_7017", AccessFailedCount = 0, ConcurrencyStamp = "a88e3f3b-259c-4018-93ac-723faf5995c3", Email = "rt_7017@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7017@RaringsTest.com", NormalizedUserName = "rt_7017@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAECtGQLHO3HFqX8/NNKqBUBttb6emGV+nRBa2Ni9A3f+JMMAVue7SHjLmMJtAP60RLA==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7017@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7017", age = 20 },
                        new { Id = "rt_7018", AccessFailedCount = 0, ConcurrencyStamp = "fa102398-c560-40a9-93c7-ae7b2af3c027", Email = "rt_7018@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7018@RaringsTest.com", NormalizedUserName = "rt_7018@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEJ8pg+Ss75SOkRnFhtvdmKjUt15saWTD9d0D0xsNi8Hl0m8HEMHWI9hFzXpoddaDSw==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7018@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7018", age = 20 },
                        new { Id = "rt_7019", AccessFailedCount = 0, ConcurrencyStamp = "689b79cc-af5b-41c9-82ad-54c369d20ee9", Email = "rt_7019@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7019@RaringsTest.com", NormalizedUserName = "rt_7019@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAELGCLNYpS1yD4RqeUtBtwBsOxhOA9GOk45EuQbCemXBQF3UY1ip/tYk1nXy5+tbwyg==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7019@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7019", age = 20 }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "1", ConcurrencyStamp = "user", Name = "user", NormalizedName = "user" },
                        new { Id = "2", ConcurrencyStamp = "admin", Name = "admin", NormalizedName = "admin" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "admin_ID_123456789", RoleId = "2" },
                        new { UserId = "rt_7000", RoleId = "1" },
                        new { UserId = "rt_7001", RoleId = "1" },
                        new { UserId = "rt_7002", RoleId = "1" },
                        new { UserId = "rt_7003", RoleId = "1" },
                        new { UserId = "rt_7004", RoleId = "1" },
                        new { UserId = "rt_7005", RoleId = "1" },
                        new { UserId = "rt_7006", RoleId = "1" },
                        new { UserId = "rt_7007", RoleId = "1" },
                        new { UserId = "rt_7008", RoleId = "1" },
                        new { UserId = "rt_7009", RoleId = "1" },
                        new { UserId = "rt_7010", RoleId = "1" },
                        new { UserId = "rt_7011", RoleId = "1" },
                        new { UserId = "rt_7012", RoleId = "1" },
                        new { UserId = "rt_7013", RoleId = "1" },
                        new { UserId = "rt_7014", RoleId = "1" },
                        new { UserId = "rt_7015", RoleId = "1" },
                        new { UserId = "rt_7016", RoleId = "1" },
                        new { UserId = "rt_7017", RoleId = "1" },
                        new { UserId = "rt_7018", RoleId = "1" },
                        new { UserId = "rt_7019", RoleId = "1" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
