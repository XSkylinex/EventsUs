// <auto-generated />
using System;
using EventsUs.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventsUs.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180917100422_dviros")]
    partial class dviros
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventsUs.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<string>("YoutubeId");

                    b.HasKey("Id");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("EventsUs.Models.FindFriends", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("FindFriends");
                });

            modelBuilder.Entity("EventsUs.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("age");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "admin_ID_123456789", AccessFailedCount = 0, ConcurrencyStamp = "9d487129-a381-47a3-a895-007d3539827d", Email = "admin@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "admin@eventus.com", NormalizedUserName = "admin@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAECRct49/c+MzfHdXCJZyymRzQg1cadtdsiIw3km7dUMkZ/8tcd8UVofDvLd3TpKP7g==", PhoneNumberConfirmed = false, SecurityStamp = "admin@eventus.com", TwoFactorEnabled = false, UserName = "admin", age = 0 },
                        new { Id = "Eu_7000", AccessFailedCount = 0, ConcurrencyStamp = "bb735e47-dc6a-420c-b773-35b82806a6e4", Email = "Eu_7000@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7000@eventus.com", NormalizedUserName = "Eu_7000@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEDcLUdcbyYsc1ww89yLRHsURcUpsAsgaPLymAlnbCrtTsReAiaHXp91fWpqtl+r4Ag==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7000@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7000", age = 20 },
                        new { Id = "Eu_7001", AccessFailedCount = 0, ConcurrencyStamp = "8b7954e6-f18b-4bf9-a984-56a9b631d453", Email = "Eu_7001@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7001@eventus.com", NormalizedUserName = "Eu_7001@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEHG14C8ziw07ozDsMlUuKu38DO3RlPjLBnnPkvWPNGcOuZyO8Ehwisk9KAbRtGyy8g==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7001@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7001", age = 20 },
                        new { Id = "Eu_7002", AccessFailedCount = 0, ConcurrencyStamp = "9009515a-e943-42d2-a244-ef9819000901", Email = "Eu_7002@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7002@eventus.com", NormalizedUserName = "Eu_7002@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEHKAQNM62jo2VGvQkSlj2KB6RoKSbhXCxKx0snt/xL1ZQHirZSXq2w8DkrjToPhX9g==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7002@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7002", age = 20 },
                        new { Id = "Eu_7003", AccessFailedCount = 0, ConcurrencyStamp = "0899418d-c7c4-4169-983f-37d5e9f9d1c1", Email = "Eu_7003@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7003@eventus.com", NormalizedUserName = "Eu_7003@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEBpQMPQU0bYmG2vXW4EScsIEcIspmDNH7TNOVzi4wLomGqSSVDeW9lMtkCQAcC7WZg==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7003@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7003", age = 20 },
                        new { Id = "Eu_7004", AccessFailedCount = 0, ConcurrencyStamp = "986f90ac-e49a-4744-94a7-facd95a8a5de", Email = "Eu_7004@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7004@eventus.com", NormalizedUserName = "Eu_7004@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEOjEpzCAJBkjiuiuDWSorVhP4ylN9Xv89Z5KZ+tjdc9206Elx+SXIDC/Le22DY/9Hg==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7004@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7004", age = 20 },
                        new { Id = "Eu_7005", AccessFailedCount = 0, ConcurrencyStamp = "3e513018-2eb2-43fa-ac29-36844264bd4f", Email = "Eu_7005@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7005@eventus.com", NormalizedUserName = "Eu_7005@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEKAhksfYCnBP8m4lSq/iXVoxJcYonxPt5FTMzBaOBaoiFyzxxDf2tFSohXZleIV/Cw==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7005@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7005", age = 20 },
                        new { Id = "Eu_7006", AccessFailedCount = 0, ConcurrencyStamp = "99c265bb-fcdf-4047-be51-9983baf26da7", Email = "Eu_7006@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7006@eventus.com", NormalizedUserName = "Eu_7006@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEPv8ZfFhQ64lwRIwGo9aYGIuYX+l5nk/ALH/VSqjbI8dW38uNDYfxAIa7baOZIgKew==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7006@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7006", age = 20 },
                        new { Id = "Eu_7007", AccessFailedCount = 0, ConcurrencyStamp = "6477d1c8-b46e-4927-b69b-239f43dc5882", Email = "Eu_7007@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7007@eventus.com", NormalizedUserName = "Eu_7007@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEIWA9Bqihl8XH9xQxsn02Ot1ELdrXtCchsJ7Tomk6oDKKaVNSOjaC4ONirkQ1yaeKw==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7007@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7007", age = 20 },
                        new { Id = "Eu_7008", AccessFailedCount = 0, ConcurrencyStamp = "49691df2-882d-44e1-9d7f-73cb4cd1c17f", Email = "Eu_7008@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7008@eventus.com", NormalizedUserName = "Eu_7008@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEEBzycVYgwDm/xE2Krshw7IUaE0F6a/hN83YKQmL93GusmWy9Cls4IbfBeqHSBblXw==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7008@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7008", age = 20 },
                        new { Id = "Eu_7009", AccessFailedCount = 0, ConcurrencyStamp = "d9e93f42-c910-4171-b346-f59ec2f7c6bc", Email = "Eu_7009@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7009@eventus.com", NormalizedUserName = "Eu_7009@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEBA5AbfM98rhta6HvF5Ozf67Nk3ygKyy+Hr16uQUG2sb/9WFLZm7/l3nwAKupyaINw==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7009@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7009", age = 20 },
                        new { Id = "Eu_7010", AccessFailedCount = 0, ConcurrencyStamp = "98f7ba2a-4352-4929-a6d3-eda658821d1a", Email = "Eu_7010@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7010@eventus.com", NormalizedUserName = "Eu_7010@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEC+J8LdY4017NdJAZeJR/ovqHYJCjhpNFvg8zIrv+SlX+OmaRp21PAYG7N1uX2xuYQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7010@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7010", age = 20 },
                        new { Id = "Eu_7011", AccessFailedCount = 0, ConcurrencyStamp = "17bbfed4-e83c-45bb-bf4f-3052ac39a1b7", Email = "Eu_7011@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7011@eventus.com", NormalizedUserName = "Eu_7011@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAELRpfVdFJXDlDrp0pP4uWEFzLlgmIjqBIFE4DAwxB8+9xVAj24bN+ATLm66F8Tt9EQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7011@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7011", age = 20 },
                        new { Id = "Eu_7012", AccessFailedCount = 0, ConcurrencyStamp = "5d89dde6-be1a-4527-b055-a941bbd89400", Email = "Eu_7012@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7012@eventus.com", NormalizedUserName = "Eu_7012@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEG9Hm27QLJV/BgTi179xNFH0xP+lxlI3hXCvCtljgTSHA2D0k/lr/VD38glbQCmqlg==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7012@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7012", age = 20 },
                        new { Id = "Eu_7013", AccessFailedCount = 0, ConcurrencyStamp = "8321aa16-c75a-4664-a82f-f3eeb045f1e6", Email = "Eu_7013@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7013@eventus.com", NormalizedUserName = "Eu_7013@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAENAhcaAPlZW/gjpo/5qbSly+zQlOD22bS2fb1QfJRKoBcNaClR+w9boDKVb8gX3FZQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7013@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7013", age = 20 },
                        new { Id = "Eu_7014", AccessFailedCount = 0, ConcurrencyStamp = "e1f3efa6-cce7-49a9-add5-8fcf31f26bb1", Email = "Eu_7014@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7014@eventus.com", NormalizedUserName = "Eu_7014@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEMeQM+Oj87nqGrzgZZxQ0mbfgT9Lf9uKyCMyaO1DaD5hF/JQtjmh/2yyZHISnEG/ww==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7014@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7014", age = 20 },
                        new { Id = "Eu_7015", AccessFailedCount = 0, ConcurrencyStamp = "f55bddd0-2dd1-48de-b794-500ce2367dc6", Email = "Eu_7015@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7015@eventus.com", NormalizedUserName = "Eu_7015@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEAPsj53vmD2nve5CNwpTbYqBTN0ANyniMfrPkTRLv/da3kVgP+qWB6liTPtgR4LPCQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7015@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7015", age = 20 },
                        new { Id = "Eu_7016", AccessFailedCount = 0, ConcurrencyStamp = "661d1490-093a-4928-8ecf-508350d7a893", Email = "Eu_7016@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7016@eventus.com", NormalizedUserName = "Eu_7016@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEBecQiXSNMON8VmrGaQXjjwgjfp03RkSBgBlTvd+j0uEUrl13Z4VVcn75TEwUi2MTw==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7016@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7016", age = 20 },
                        new { Id = "Eu_7017", AccessFailedCount = 0, ConcurrencyStamp = "68f3fc69-99e1-443c-a5d2-6c3f6a365bae", Email = "Eu_7017@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7017@eventus.com", NormalizedUserName = "Eu_7017@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEEjXOJUuSwEdVvTN9yBkQ/3td0ZdyBhyCU5cq5iTd1O5GzyhsaEs++44H0Zai5xM7A==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7017@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7017", age = 20 },
                        new { Id = "Eu_7018", AccessFailedCount = 0, ConcurrencyStamp = "123ae28a-45d7-4f23-a931-ddbe9992a846", Email = "Eu_7018@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7018@eventus.com", NormalizedUserName = "Eu_7018@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEJHQKeFvjp1BLAxc5FiYO5txdlGH9lr/0tj1nzuxzMx5VIfZLPmqoVl4gkuNx4f3+g==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7018@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7018", age = 20 },
                        new { Id = "Eu_7019", AccessFailedCount = 0, ConcurrencyStamp = "9c459224-19c3-4378-80fa-f165b8aa5b00", Email = "Eu_7019@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7019@eventus.com", NormalizedUserName = "Eu_7019@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAENoxvAv86sjv5pEy9+L4x+rJTCK9cwbodALA7J+ldlpaaQ7k5gIVY9iVLMYHaOJ4mQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7019@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7019", age = 20 }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "1", ConcurrencyStamp = "user", Name = "user", NormalizedName = "user" },
                        new { Id = "2", ConcurrencyStamp = "admin", Name = "admin", NormalizedName = "admin" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "admin_ID_123456789", RoleId = "2" },
                        new { UserId = "Eu_7000", RoleId = "1" },
                        new { UserId = "Eu_7001", RoleId = "1" },
                        new { UserId = "Eu_7002", RoleId = "1" },
                        new { UserId = "Eu_7003", RoleId = "1" },
                        new { UserId = "Eu_7004", RoleId = "1" },
                        new { UserId = "Eu_7005", RoleId = "1" },
                        new { UserId = "Eu_7006", RoleId = "1" },
                        new { UserId = "Eu_7007", RoleId = "1" },
                        new { UserId = "Eu_7008", RoleId = "1" },
                        new { UserId = "Eu_7009", RoleId = "1" },
                        new { UserId = "Eu_7010", RoleId = "1" },
                        new { UserId = "Eu_7011", RoleId = "1" },
                        new { UserId = "Eu_7012", RoleId = "1" },
                        new { UserId = "Eu_7013", RoleId = "1" },
                        new { UserId = "Eu_7014", RoleId = "1" },
                        new { UserId = "Eu_7015", RoleId = "1" },
                        new { UserId = "Eu_7016", RoleId = "1" },
                        new { UserId = "Eu_7017", RoleId = "1" },
                        new { UserId = "Eu_7018", RoleId = "1" },
                        new { UserId = "Eu_7019", RoleId = "1" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
