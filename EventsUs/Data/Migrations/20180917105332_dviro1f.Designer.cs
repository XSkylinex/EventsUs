// <auto-generated />
using System;
using EventsUs.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventsUs.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180917105332_dviro1f")]
    partial class dviro1f
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventsUs.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<bool>("PublicEvent");

                    b.Property<string>("YoutubeId");

                    b.Property<string>("adminId");

                    b.HasKey("Id");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("EventsUs.Models.FindFriends", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("FindFriends");
                });

            modelBuilder.Entity("EventsUs.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("age");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "admin_ID_123456789", AccessFailedCount = 0, ConcurrencyStamp = "5ca189ed-2063-4584-bf1e-e400658c2c5c", Email = "admin@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "admin@eventus.com", NormalizedUserName = "admin@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEOFZkMwvCPPV39+s3aQhs22e5aRqIMhhhYm67btXMEsKwZku1CBgvnm4wsa06middA==", PhoneNumberConfirmed = false, SecurityStamp = "admin@eventus.com", TwoFactorEnabled = false, UserName = "admin", age = 0 },
                        new { Id = "Eu_7000", AccessFailedCount = 0, ConcurrencyStamp = "ea633978-7425-4138-8515-6b9af1f1b992", Email = "Eu_7000@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7000@eventus.com", NormalizedUserName = "Eu_7000@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEJzQEBhuIAUkoZirLuFxOc3mldVsrbKP75nIC/PwLGyxqw+5ERbUqJX2ZatUwDBc4g==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7000@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7000", age = 20 },
                        new { Id = "Eu_7001", AccessFailedCount = 0, ConcurrencyStamp = "1025a76c-540c-4c5d-99ed-0e48ea2b3d6b", Email = "Eu_7001@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7001@eventus.com", NormalizedUserName = "Eu_7001@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEGjb3Fide7oFrDTR6UOPEb9aTdcuguoEEVsRXhtBRgbtUuNTjo6x6A28l1w9OLNp3Q==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7001@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7001", age = 20 },
                        new { Id = "Eu_7002", AccessFailedCount = 0, ConcurrencyStamp = "62cab861-3d3b-43ba-811e-23ba2a61ceab", Email = "Eu_7002@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7002@eventus.com", NormalizedUserName = "Eu_7002@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEIPEHfkUDwuSRoYBG//Rbt78aeDlS4QCYiefRN4EKQP3iOb07Kd5ePAcxahyHjtEww==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7002@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7002", age = 20 },
                        new { Id = "Eu_7003", AccessFailedCount = 0, ConcurrencyStamp = "b2f1faeb-2f79-4927-ad86-24151981530b", Email = "Eu_7003@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7003@eventus.com", NormalizedUserName = "Eu_7003@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAECCwKL9Ys0pz1xFyJHzSCbLTlKYWKsmgc0jLc5drPuQBOAEAud5y2/gGBDpRWLTrZQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7003@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7003", age = 20 },
                        new { Id = "Eu_7004", AccessFailedCount = 0, ConcurrencyStamp = "185aa650-4c71-4e22-9a73-ddd64ebdf714", Email = "Eu_7004@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7004@eventus.com", NormalizedUserName = "Eu_7004@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEL1SYPACBvA20CqSl4XWWM7EHksIjh3eloq3ExY71DxhK59QLjljMWMG3mxbAtFdSg==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7004@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7004", age = 20 },
                        new { Id = "Eu_7005", AccessFailedCount = 0, ConcurrencyStamp = "ff1d6391-f478-49d9-a833-7affe83c4e41", Email = "Eu_7005@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7005@eventus.com", NormalizedUserName = "Eu_7005@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEEVXAyn+0fNJZUWJQwZGfZkFS6xPHRTHAiZtzd+0GXTrDwKhi7K7QSjHrVlwoolIxg==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7005@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7005", age = 20 },
                        new { Id = "Eu_7006", AccessFailedCount = 0, ConcurrencyStamp = "a529f7c7-6ebe-42ed-a10e-82332319b8c5", Email = "Eu_7006@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7006@eventus.com", NormalizedUserName = "Eu_7006@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAENvm+PoDDdcReyOqPzsLkR5E66UZNF0a0rN/mtLLNyYSS4jp0zm+fPnImmNyjtl2mg==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7006@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7006", age = 20 },
                        new { Id = "Eu_7007", AccessFailedCount = 0, ConcurrencyStamp = "ddefaa01-7c70-49aa-93c0-86d8b86d3afd", Email = "Eu_7007@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7007@eventus.com", NormalizedUserName = "Eu_7007@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEHcxDsRmhqlBnLB8644DOxbNoOhnjfSnzXfd6YS05LhCszxNtWM3s9eGYAiMgAsKcQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7007@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7007", age = 20 },
                        new { Id = "Eu_7008", AccessFailedCount = 0, ConcurrencyStamp = "1dd3c2cf-7ecb-4160-8b8d-46dbe15265f9", Email = "Eu_7008@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7008@eventus.com", NormalizedUserName = "Eu_7008@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEL2MQsSHpGwccd73/JfHhVvEL/2dKL86n7AsQB/9j9JzDplVQdz6fhpYfCH6xObTFQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7008@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7008", age = 20 },
                        new { Id = "Eu_7009", AccessFailedCount = 0, ConcurrencyStamp = "3cf7ac53-4bd5-4851-9ea6-a08aa0d88108", Email = "Eu_7009@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7009@eventus.com", NormalizedUserName = "Eu_7009@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEBu8GP1OmTvc2OpQdwhAmlupeHUlAIO2e2DzwOArRUzwuxFpSWBupMTGAks4am1G9w==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7009@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7009", age = 20 },
                        new { Id = "Eu_7010", AccessFailedCount = 0, ConcurrencyStamp = "69edbc49-a4ec-4cef-9278-b628fc37adec", Email = "Eu_7010@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7010@eventus.com", NormalizedUserName = "Eu_7010@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEIzQQgWYWl3vW7x2RLvEZRT/h5Nx6F7Db8llcp4hURzR5k+XD1cChPc7H7udmy9k/g==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7010@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7010", age = 20 },
                        new { Id = "Eu_7011", AccessFailedCount = 0, ConcurrencyStamp = "86c8be7a-8e23-4389-99e6-4b4a0a846c32", Email = "Eu_7011@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7011@eventus.com", NormalizedUserName = "Eu_7011@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEEbR+ZPK/lFyndqaLHjbSO2+90CHXrWqZVhf2QefKfo38/JS9V2EAketn5KJYDzpdw==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7011@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7011", age = 20 },
                        new { Id = "Eu_7012", AccessFailedCount = 0, ConcurrencyStamp = "5987dfa9-dece-4e90-b70c-fa982f5a2882", Email = "Eu_7012@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7012@eventus.com", NormalizedUserName = "Eu_7012@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEEMi8EeAR+dkjZDaU/15YUsLZWhTtEFxS9OxUrPuEtrXLP1GHZVOcNdlniRttp6cnA==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7012@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7012", age = 20 },
                        new { Id = "Eu_7013", AccessFailedCount = 0, ConcurrencyStamp = "c27565df-f241-43e8-9bf8-106e83e39b8e", Email = "Eu_7013@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7013@eventus.com", NormalizedUserName = "Eu_7013@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEOmfwhFTxMNE8OiLZOEhHfPiB9W/se36anJQtMvV61/z10qrvaj+0sr9xV/ku/9P1g==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7013@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7013", age = 20 },
                        new { Id = "Eu_7014", AccessFailedCount = 0, ConcurrencyStamp = "0930feb4-a16d-4e34-9194-70c17547f0a9", Email = "Eu_7014@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7014@eventus.com", NormalizedUserName = "Eu_7014@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEAweUlG2Dmy6GQ2c3qK+2UgA3Py37s4N4ttIxpGiDlRzHCyGIQiRfumArlVAD0N4yw==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7014@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7014", age = 20 },
                        new { Id = "Eu_7015", AccessFailedCount = 0, ConcurrencyStamp = "2492f041-f2c6-4ca8-8cc0-949bf71a5083", Email = "Eu_7015@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7015@eventus.com", NormalizedUserName = "Eu_7015@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEJDjr3Rn+HkOo2ytRADP9qYIgeM/t+5P/I3y5sIqFjKIQFlQaGMc+uw3iaTqR3vZbQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7015@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7015", age = 20 },
                        new { Id = "Eu_7016", AccessFailedCount = 0, ConcurrencyStamp = "aa735f41-419d-410a-a252-e0ba651e5a25", Email = "Eu_7016@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7016@eventus.com", NormalizedUserName = "Eu_7016@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEJXEZCS8OpxWUk9zFOAvLI7HyKWnUeYwGaG+uGvhEH3L8ThS5e/Patw9RLIO9ryfsQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7016@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7016", age = 20 },
                        new { Id = "Eu_7017", AccessFailedCount = 0, ConcurrencyStamp = "b2930b20-045f-46ee-9476-d871ae107570", Email = "Eu_7017@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7017@eventus.com", NormalizedUserName = "Eu_7017@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEDrwJEstvDPZFYLGyzgcE9QTZVKr+/lmsk+eqlHNBM2G+1lihDr4fi/49KWhJvGHAA==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7017@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7017", age = 20 },
                        new { Id = "Eu_7018", AccessFailedCount = 0, ConcurrencyStamp = "dd5f051a-08f0-44ab-bf33-f9963c0f2798", Email = "Eu_7018@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7018@eventus.com", NormalizedUserName = "Eu_7018@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEO5+H/9dVSRuQlYvjkam18Dce57nuwEYasgwdB84MwLRSuxh7dBE1lawMaPAUYcTAA==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7018@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7018", age = 20 },
                        new { Id = "Eu_7019", AccessFailedCount = 0, ConcurrencyStamp = "2de551c9-868a-4c33-bce5-5c4172237d14", Email = "Eu_7019@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7019@eventus.com", NormalizedUserName = "Eu_7019@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEGpEscJOD7uodAr5o64Py1WiUGUQfvKcz/gstEDrNZHFhlcY01Rwg0lr7LnjcA9/Mw==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7019@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7019", age = 20 }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "1", ConcurrencyStamp = "user", Name = "user", NormalizedName = "user" },
                        new { Id = "2", ConcurrencyStamp = "admin", Name = "admin", NormalizedName = "admin" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "admin_ID_123456789", RoleId = "2" },
                        new { UserId = "Eu_7000", RoleId = "1" },
                        new { UserId = "Eu_7001", RoleId = "1" },
                        new { UserId = "Eu_7002", RoleId = "1" },
                        new { UserId = "Eu_7003", RoleId = "1" },
                        new { UserId = "Eu_7004", RoleId = "1" },
                        new { UserId = "Eu_7005", RoleId = "1" },
                        new { UserId = "Eu_7006", RoleId = "1" },
                        new { UserId = "Eu_7007", RoleId = "1" },
                        new { UserId = "Eu_7008", RoleId = "1" },
                        new { UserId = "Eu_7009", RoleId = "1" },
                        new { UserId = "Eu_7010", RoleId = "1" },
                        new { UserId = "Eu_7011", RoleId = "1" },
                        new { UserId = "Eu_7012", RoleId = "1" },
                        new { UserId = "Eu_7013", RoleId = "1" },
                        new { UserId = "Eu_7014", RoleId = "1" },
                        new { UserId = "Eu_7015", RoleId = "1" },
                        new { UserId = "Eu_7016", RoleId = "1" },
                        new { UserId = "Eu_7017", RoleId = "1" },
                        new { UserId = "Eu_7018", RoleId = "1" },
                        new { UserId = "Eu_7019", RoleId = "1" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
