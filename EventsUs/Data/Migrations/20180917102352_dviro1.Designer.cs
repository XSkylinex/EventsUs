// <auto-generated />
using System;
using EventsUs.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventsUs.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180917102352_dviro1")]
    partial class dviro1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventsUs.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<bool>("PublicEvent");

                    b.Property<string>("YoutubeId");

                    b.Property<int>("adminId");

                    b.HasKey("Id");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("EventsUs.Models.FindFriends", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("FindFriends");
                });

            modelBuilder.Entity("EventsUs.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("age");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "admin_ID_123456789", AccessFailedCount = 0, ConcurrencyStamp = "f644830b-8412-4c75-a705-1956891e3c8c", Email = "admin@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "admin@eventus.com", NormalizedUserName = "admin@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEIm16AqqiKLKIMHZ2JYkPJy9z5wvcQ7wKeFbZL6Db1xFPwsmOXeorMYs6QkoQUzj9Q==", PhoneNumberConfirmed = false, SecurityStamp = "admin@eventus.com", TwoFactorEnabled = false, UserName = "admin", age = 0 },
                        new { Id = "Eu_7000", AccessFailedCount = 0, ConcurrencyStamp = "c2aa75a1-984e-409a-a6c9-2d234fc5f79e", Email = "Eu_7000@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7000@eventus.com", NormalizedUserName = "Eu_7000@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAELWhel3CIUycIZ1fycGWmDjn14Y+5d/UpWzAi+PLlFG9RhOyRp9XWI6h/nm5JtUrFQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7000@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7000", age = 20 },
                        new { Id = "Eu_7001", AccessFailedCount = 0, ConcurrencyStamp = "7037b2a0-bd10-4a84-8dc4-09d64d5b10f8", Email = "Eu_7001@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7001@eventus.com", NormalizedUserName = "Eu_7001@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEAPuCYWgDbjYZlTPADIjjSpwjkNmt03piSW/xfmLPWKk47VzWwtvl8KzpN1Tnl9tRA==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7001@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7001", age = 20 },
                        new { Id = "Eu_7002", AccessFailedCount = 0, ConcurrencyStamp = "016ebcba-66fe-4b88-ae16-d99048df10b0", Email = "Eu_7002@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7002@eventus.com", NormalizedUserName = "Eu_7002@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEN/V6UahYFD2gdUVMIz/0M5xosrGQNJPgC1dG1KyANAfRekzbtCpGRH+YxHWIm5uCg==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7002@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7002", age = 20 },
                        new { Id = "Eu_7003", AccessFailedCount = 0, ConcurrencyStamp = "70f6a895-154d-442a-b878-434a24e643eb", Email = "Eu_7003@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7003@eventus.com", NormalizedUserName = "Eu_7003@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEKGnbZK4USXZzVfNOoK5rw7Rtwv/t+R1qZ9BqND42rE7VFgzLns9DJeZ+kjLyjynVQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7003@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7003", age = 20 },
                        new { Id = "Eu_7004", AccessFailedCount = 0, ConcurrencyStamp = "ce4cd2af-c21c-44ef-8b5d-758c1165d3d8", Email = "Eu_7004@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7004@eventus.com", NormalizedUserName = "Eu_7004@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEFEaEgcwjH4OUjj7wvTcHIV7HoNeo6IZkqMZFgUCLpu39+ZW7LWQJqIbeCNXLlX98A==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7004@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7004", age = 20 },
                        new { Id = "Eu_7005", AccessFailedCount = 0, ConcurrencyStamp = "d761e82d-5147-4f6a-950a-13ed3374416d", Email = "Eu_7005@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7005@eventus.com", NormalizedUserName = "Eu_7005@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEGsgQvRnzlHaOP6kQA4KDBjfiTtyJy8B76NU5CJXniYsWcvX8g+fRHxB9RWShbjapQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7005@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7005", age = 20 },
                        new { Id = "Eu_7006", AccessFailedCount = 0, ConcurrencyStamp = "3837ebc4-d407-42dc-ba5b-543bc587e593", Email = "Eu_7006@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7006@eventus.com", NormalizedUserName = "Eu_7006@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEI8Jo0PeaQ26efTvKvTRVzDw4TVkUz42fpHCRTroCzMYluv/gdtNMeLebpWQRg1EiA==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7006@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7006", age = 20 },
                        new { Id = "Eu_7007", AccessFailedCount = 0, ConcurrencyStamp = "c631a6d2-b423-4133-9202-556cabda1993", Email = "Eu_7007@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7007@eventus.com", NormalizedUserName = "Eu_7007@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEN7v5YRjiaI/i3xVDkPhbHESWt0kctr2nBLwCcvZS8KzLOvzLkwdNBPRVZOx8ad4wQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7007@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7007", age = 20 },
                        new { Id = "Eu_7008", AccessFailedCount = 0, ConcurrencyStamp = "62e5a136-dccf-42c5-9435-db981b8b1a3b", Email = "Eu_7008@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7008@eventus.com", NormalizedUserName = "Eu_7008@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEMNh2EOr7JZPG5d4IMKcLq8ZF5lZQ4EueV8KEwlZHGZcDAQO/MyIIxSLKbKs4eeNHA==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7008@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7008", age = 20 },
                        new { Id = "Eu_7009", AccessFailedCount = 0, ConcurrencyStamp = "406cf7a6-35f9-4b65-bcc4-53192e9b3127", Email = "Eu_7009@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7009@eventus.com", NormalizedUserName = "Eu_7009@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEO5tkQCK+LXViWARVnLPdpnd/PS8qhCBrc4S/1gqBzuk0CxXyfU12yN1H2899KzAhw==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7009@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7009", age = 20 },
                        new { Id = "Eu_7010", AccessFailedCount = 0, ConcurrencyStamp = "ca56433f-db65-4df8-8dbe-eef44fe96fb3", Email = "Eu_7010@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7010@eventus.com", NormalizedUserName = "Eu_7010@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAELAdgPdyAMp6p7qrM3gmh40bW3Z0rd+OFLkS7Bnk6kMSkgdVAGMynGKuIT6hA5KcYA==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7010@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7010", age = 20 },
                        new { Id = "Eu_7011", AccessFailedCount = 0, ConcurrencyStamp = "3d5e146c-82d4-443a-9632-1a5e8f091126", Email = "Eu_7011@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7011@eventus.com", NormalizedUserName = "Eu_7011@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEHUB8IAM5+DKDD1fye+towLB3uGZ0rTTjHldyqCK63xFIBBARerHGWdgrC6GcN9erw==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7011@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7011", age = 20 },
                        new { Id = "Eu_7012", AccessFailedCount = 0, ConcurrencyStamp = "ac2af8c4-82c3-4461-a052-f344872d0bd6", Email = "Eu_7012@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7012@eventus.com", NormalizedUserName = "Eu_7012@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEA8uNfaCJhfbalufa8XnSrZNiOfypuOj0bLkU/lGqZtRdknt6YAjox72Ngmz2mB77w==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7012@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7012", age = 20 },
                        new { Id = "Eu_7013", AccessFailedCount = 0, ConcurrencyStamp = "5801d9c0-01d1-4fba-afc2-e7f55b4c7e0e", Email = "Eu_7013@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7013@eventus.com", NormalizedUserName = "Eu_7013@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEAEQNzxoAJzeOZQG/jzlPpWi284wxn+cSAXJGFdin7vTXvyvaJUrYFUU4zyJ30ODEA==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7013@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7013", age = 20 },
                        new { Id = "Eu_7014", AccessFailedCount = 0, ConcurrencyStamp = "8bebdcdd-821b-4c86-bfd9-e3521dce62bf", Email = "Eu_7014@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7014@eventus.com", NormalizedUserName = "Eu_7014@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAELgDGJykfJ2Vf1oyCenVbbGjeDc9wEyygA49JeSLRrhmKfu6nIgaOUw2BUyxW77x2A==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7014@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7014", age = 20 },
                        new { Id = "Eu_7015", AccessFailedCount = 0, ConcurrencyStamp = "0a0490b2-35b4-4844-a454-816caeb0dab0", Email = "Eu_7015@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7015@eventus.com", NormalizedUserName = "Eu_7015@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEI5aKIgClv5sD7g0ivkjYXrLM3ELaOj9MuNT7nRGk+B1cRgyzpgThLCk+gWKKkTTkw==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7015@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7015", age = 20 },
                        new { Id = "Eu_7016", AccessFailedCount = 0, ConcurrencyStamp = "6a5f88e2-c31f-4af4-87d3-53321f40f5d0", Email = "Eu_7016@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7016@eventus.com", NormalizedUserName = "Eu_7016@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAELJA4fr+xaqgRHBcAKamev1Mu4v4tU0lQ4VmuBs0vDcfCZFCqBSgCEuM860wbGCa1g==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7016@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7016", age = 20 },
                        new { Id = "Eu_7017", AccessFailedCount = 0, ConcurrencyStamp = "a364351e-e071-4412-ba2c-e76ea6bf6d68", Email = "Eu_7017@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7017@eventus.com", NormalizedUserName = "Eu_7017@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEFnkFk3Khcmk/F9UP27yaoxyV/BTKTCmJpyO6Va+mtJ8ByB0G5xnkHlyQpRik6lHfQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7017@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7017", age = 20 },
                        new { Id = "Eu_7018", AccessFailedCount = 0, ConcurrencyStamp = "3672d2bb-9768-496b-afea-1e181834fb34", Email = "Eu_7018@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7018@eventus.com", NormalizedUserName = "Eu_7018@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEGFCzAMpFvI05/ur4TTMbBQbO/b/KVjMxS+zITbsMTQ58cLivJ98+xv639hHSNEOxA==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7018@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7018", age = 20 },
                        new { Id = "Eu_7019", AccessFailedCount = 0, ConcurrencyStamp = "fd65b970-cf00-4b9b-880d-b559cb7b1de1", Email = "Eu_7019@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7019@eventus.com", NormalizedUserName = "Eu_7019@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEICCQGrSOK3tomZZPhC57fvQXdUDH/6V2a5gH+Mk9/ujqshpARk5V47uJulFl0P7bA==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7019@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7019", age = 20 }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "1", ConcurrencyStamp = "user", Name = "user", NormalizedName = "user" },
                        new { Id = "2", ConcurrencyStamp = "admin", Name = "admin", NormalizedName = "admin" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "admin_ID_123456789", RoleId = "2" },
                        new { UserId = "Eu_7000", RoleId = "1" },
                        new { UserId = "Eu_7001", RoleId = "1" },
                        new { UserId = "Eu_7002", RoleId = "1" },
                        new { UserId = "Eu_7003", RoleId = "1" },
                        new { UserId = "Eu_7004", RoleId = "1" },
                        new { UserId = "Eu_7005", RoleId = "1" },
                        new { UserId = "Eu_7006", RoleId = "1" },
                        new { UserId = "Eu_7007", RoleId = "1" },
                        new { UserId = "Eu_7008", RoleId = "1" },
                        new { UserId = "Eu_7009", RoleId = "1" },
                        new { UserId = "Eu_7010", RoleId = "1" },
                        new { UserId = "Eu_7011", RoleId = "1" },
                        new { UserId = "Eu_7012", RoleId = "1" },
                        new { UserId = "Eu_7013", RoleId = "1" },
                        new { UserId = "Eu_7014", RoleId = "1" },
                        new { UserId = "Eu_7015", RoleId = "1" },
                        new { UserId = "Eu_7016", RoleId = "1" },
                        new { UserId = "Eu_7017", RoleId = "1" },
                        new { UserId = "Eu_7018", RoleId = "1" },
                        new { UserId = "Eu_7019", RoleId = "1" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
