// <auto-generated />
using System;
using EventsUs.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EventsUs.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180916170556_adddemousers1")]
    partial class adddemousers1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventsUs.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<string>("YoutubeId");

                    b.HasKey("Id");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("EventsUs.Models.FindFriends", b =>
                {
                    b.Property<string>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("FindFriends");
                });

            modelBuilder.Entity("EventsUs.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("age");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "admin_ID_123456789", AccessFailedCount = 0, ConcurrencyStamp = "3b4d14af-a05c-4ba6-9ba7-a90cd642e64f", Email = "admin@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "admin@eventus.com", NormalizedUserName = "admin@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAECJgviBWKzR3tZ3o7c8uJUQozIKHv7kcJb+kAd9fT4rjS4UdHIaI4MaEjZb8i3kEMg==", PhoneNumberConfirmed = false, SecurityStamp = "admin@eventus.com", TwoFactorEnabled = false, UserName = "admin", age = 0 },
                        new { Id = "Eu_7000", AccessFailedCount = 0, ConcurrencyStamp = "f576ca45-9db2-4d1d-b4ce-b974d8f59f15", Email = "Eu_7000@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7000@eventus.com", NormalizedUserName = "Eu_7000@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEKio+ynKmD/xrxz8Mxk3COJR79xYfPTWGkE3zH9Jo9gF0h3B48QroHwPdSxU4/6wFA==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7000@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7000", age = 20 },
                        new { Id = "Eu_7001", AccessFailedCount = 0, ConcurrencyStamp = "d6fed473-7124-4b92-bd4c-524fbb3c0fa7", Email = "Eu_7001@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7001@eventus.com", NormalizedUserName = "Eu_7001@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEIEL6WI/YaxGjxGp4DNMOX2tlk6xaYWOcpiWW4O7/Hsc5sF52pEUFo1it+NG44+vdQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7001@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7001", age = 20 },
                        new { Id = "Eu_7002", AccessFailedCount = 0, ConcurrencyStamp = "9ff2e50c-e7c6-4628-a8bc-119e8aa33318", Email = "Eu_7002@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7002@eventus.com", NormalizedUserName = "Eu_7002@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEEpTb+qkK/N0KAd9BDzmVUqo/L7OWDz0hc6dAK23Ey77bMY9RXxDyz7RP4WwS48xzA==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7002@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7002", age = 20 },
                        new { Id = "Eu_7003", AccessFailedCount = 0, ConcurrencyStamp = "d2e7ee7e-4031-4bc3-917c-8f25611f5185", Email = "Eu_7003@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7003@eventus.com", NormalizedUserName = "Eu_7003@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEHoTgSlUwvkYkOgfjicYRKfZ2NJ+D0gWfLVoWpAL8E5nB74Qc2/Z3ofNr58ZTjwCSA==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7003@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7003", age = 20 },
                        new { Id = "Eu_7004", AccessFailedCount = 0, ConcurrencyStamp = "f55876ab-ea04-4677-be33-5086deefc26b", Email = "Eu_7004@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7004@eventus.com", NormalizedUserName = "Eu_7004@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEIFdbtGLeiFA8QdyBsVn7BKTeo2GufEVl7L7YT1mAPEzd8zPgtcoIJP+simZwWZjjQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7004@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7004", age = 20 },
                        new { Id = "Eu_7005", AccessFailedCount = 0, ConcurrencyStamp = "e7d8e89b-87b7-49bd-86dc-b03e5caa0ac7", Email = "Eu_7005@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7005@eventus.com", NormalizedUserName = "Eu_7005@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAENPX2bi1ml337YLNogrC1f4l04Ls8v4lFskK+kdefx122+RcjLXS/RlTz5JpSBv2Vw==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7005@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7005", age = 20 },
                        new { Id = "Eu_7006", AccessFailedCount = 0, ConcurrencyStamp = "cc09f1fa-6613-4df6-a8cd-185bc86870af", Email = "Eu_7006@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7006@eventus.com", NormalizedUserName = "Eu_7006@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAECfepk5mR17l36euhoz8PJHV+6UzcJTQP8MicrlmnngjrbNt0DY5zFPN0DkwJ2hVxQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7006@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7006", age = 20 },
                        new { Id = "Eu_7007", AccessFailedCount = 0, ConcurrencyStamp = "35280ee3-c751-4c57-b732-e610d1b149d4", Email = "Eu_7007@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7007@eventus.com", NormalizedUserName = "Eu_7007@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAENHXyzrxSBlPzZfHlTW6JeYWH1OVzOD6hUs5z4W6DE8yqOjQVEC0VuVJqw1jKmtUiA==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7007@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7007", age = 20 },
                        new { Id = "Eu_7008", AccessFailedCount = 0, ConcurrencyStamp = "f2bcf10c-8639-43f4-b0bf-cb718d6eb5b9", Email = "Eu_7008@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7008@eventus.com", NormalizedUserName = "Eu_7008@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEOveJWOa3uIFg1BjPlzYhf+um0snapz2skaOzE/ANmAzjpOpIDuFZLBX6X+B/bo+DA==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7008@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7008", age = 20 },
                        new { Id = "Eu_7009", AccessFailedCount = 0, ConcurrencyStamp = "9a7a99c6-1619-4934-bf3c-18e855e74512", Email = "Eu_7009@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7009@eventus.com", NormalizedUserName = "Eu_7009@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEBK7wplFGcAyYTDNNTzOoX1hBoVj89du5+M7K5/jz+fCJdfK+0KhKJC6wNVclNnGZQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7009@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7009", age = 20 },
                        new { Id = "Eu_7010", AccessFailedCount = 0, ConcurrencyStamp = "428608fb-134a-4c12-a2db-1d19883822a8", Email = "Eu_7010@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7010@eventus.com", NormalizedUserName = "Eu_7010@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEH2Z77IZhr/gp1xz5bS0PmrI9qZq1zWRbvo4bl5G/Dc1edM7MG2lN13iFnUUhfAWXw==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7010@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7010", age = 20 },
                        new { Id = "Eu_7011", AccessFailedCount = 0, ConcurrencyStamp = "3f3a65f7-008d-4f99-a11f-7d1c52283184", Email = "Eu_7011@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7011@eventus.com", NormalizedUserName = "Eu_7011@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEF/aEMpYzqRjCNJOBlMynYgqDK6V7ea92wZFeQDjSkE+vz/iplmYykoOhwomYRVt+A==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7011@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7011", age = 20 },
                        new { Id = "Eu_7012", AccessFailedCount = 0, ConcurrencyStamp = "771331ea-7b96-4847-927c-acb2d2ccc5e3", Email = "Eu_7012@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7012@eventus.com", NormalizedUserName = "Eu_7012@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEFzWiGBjpR/oYOKwnTkoCCx3CbCgeXmSApWR5C+t7zMuPrBHH++qptu9HrpYSZHJlw==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7012@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7012", age = 20 },
                        new { Id = "Eu_7013", AccessFailedCount = 0, ConcurrencyStamp = "271cf138-fc71-49e7-a887-fae5b7a9a95b", Email = "Eu_7013@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7013@eventus.com", NormalizedUserName = "Eu_7013@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAELhYiugExELIQqewT2iBHQ+Qc/bdrlEQ+f0GKdsyGp9Xo9he2bWVdVAaQImgv5TqKg==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7013@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7013", age = 20 },
                        new { Id = "Eu_7014", AccessFailedCount = 0, ConcurrencyStamp = "cd974a41-adfa-4960-aa07-49a3aa05d0b4", Email = "Eu_7014@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7014@eventus.com", NormalizedUserName = "Eu_7014@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEBdJPxPuA7yIX+HDfvTjVfrt6QIYAlOYRokPhVl7ek/uGMKIha5Pkv+EKnRWsv/arw==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7014@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7014", age = 20 },
                        new { Id = "Eu_7015", AccessFailedCount = 0, ConcurrencyStamp = "e5d347a0-1d62-4875-8bf9-b93c6b3edad8", Email = "Eu_7015@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7015@eventus.com", NormalizedUserName = "Eu_7015@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEHTpsb12rHKt9PUlKT0njNe2qD/Q84SIVyemv3/aikBGYlpVra/6N+f3NcRDI9Yb/Q==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7015@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7015", age = 20 },
                        new { Id = "Eu_7016", AccessFailedCount = 0, ConcurrencyStamp = "63bed453-e858-4ade-a6ac-be771e062086", Email = "Eu_7016@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7016@eventus.com", NormalizedUserName = "Eu_7016@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEJaSv3Ak13OQghUhsxN5lzSIinUJw2hrdKidZsfaq82RKdCeOdYxU8Ii7pabdtt87w==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7016@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7016", age = 20 },
                        new { Id = "Eu_7017", AccessFailedCount = 0, ConcurrencyStamp = "d15461a7-3cc9-4b16-8621-ed3d75452f0e", Email = "Eu_7017@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7017@eventus.com", NormalizedUserName = "Eu_7017@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEE7j7yFQbqSRsQhPAEK34V+o25iRaDsg6zThBr/bdiq9LYPw6nWdw3uELR8aWCxH3w==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7017@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7017", age = 20 },
                        new { Id = "Eu_7018", AccessFailedCount = 0, ConcurrencyStamp = "3aa96cb0-fbc5-4e74-b2f7-c72dc99f4f31", Email = "Eu_7018@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7018@eventus.com", NormalizedUserName = "Eu_7018@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEOVQliiayS53wpw/8zhlRZlKWMsnLDQ1he9MsJNRoXOebZnEva8PfyYmfDKUFEchsQ==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7018@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7018", age = 20 },
                        new { Id = "Eu_7019", AccessFailedCount = 0, ConcurrencyStamp = "d8beca8b-5b2a-40a1-9997-85d1a9a8cba9", Email = "Eu_7019@eventus.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "Eu_7019@eventus.com", NormalizedUserName = "Eu_7019@eventus.com", PasswordHash = "AQAAAAEAACcQAAAAEBbM8eT0HQB1GzQwf8tYdg57rJyFEleWg83R5qkTHJU6F56i7aYeIboij7KQ9+4J4A==", PhoneNumberConfirmed = false, SecurityStamp = "Eu_7019@eventus.com", TwoFactorEnabled = false, UserName = "EventUs_Eu_7019", age = 20 }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "1", ConcurrencyStamp = "user", Name = "user", NormalizedName = "user" },
                        new { Id = "2", ConcurrencyStamp = "admin", Name = "admin", NormalizedName = "admin" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "admin_ID_123456789", RoleId = "2" },
                        new { UserId = "Eu_7000", RoleId = "1" },
                        new { UserId = "Eu_7001", RoleId = "1" },
                        new { UserId = "Eu_7002", RoleId = "1" },
                        new { UserId = "Eu_7003", RoleId = "1" },
                        new { UserId = "Eu_7004", RoleId = "1" },
                        new { UserId = "Eu_7005", RoleId = "1" },
                        new { UserId = "Eu_7006", RoleId = "1" },
                        new { UserId = "Eu_7007", RoleId = "1" },
                        new { UserId = "Eu_7008", RoleId = "1" },
                        new { UserId = "Eu_7009", RoleId = "1" },
                        new { UserId = "Eu_7010", RoleId = "1" },
                        new { UserId = "Eu_7011", RoleId = "1" },
                        new { UserId = "Eu_7012", RoleId = "1" },
                        new { UserId = "Eu_7013", RoleId = "1" },
                        new { UserId = "Eu_7014", RoleId = "1" },
                        new { UserId = "Eu_7015", RoleId = "1" },
                        new { UserId = "Eu_7016", RoleId = "1" },
                        new { UserId = "Eu_7017", RoleId = "1" },
                        new { UserId = "Eu_7018", RoleId = "1" },
                        new { UserId = "Eu_7019", RoleId = "1" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EventsUs.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
