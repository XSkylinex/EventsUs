@model EventsUs.Models.Event

@{
    ViewData["Title"] = "Details";
}
<h2>Details</h2>
<div>

    <h4>Event</h4>

    <!DOCTYPE HTML>
    <script language="JavaScript" type="text/javascript" src="~/lib/jquery/dist/jquery.min.js"></script>
    <script>
    var apiCall = 'https://api.openweathermap.org/data/2.5/weather?q=@Model.Location&appid=445a541d4de4179f24779917c992e772';
    $.getJSON(apiCall, weatherCallback);
    function weatherCallback(weatherData) {
        var cityName = weatherData.name;
        var country = weatherData.sys.country;
        var description = weatherData.weather[0].description;
        $('.weatherResponse').append("The weather in " + cityName + " is " + description);
    }
    </script>
    <html>
    <head>
        <script src="~/lib/jquery/dist/jquery.js">
        </script>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width" />
        <title>Js Bin</title>
    </head>
    <body>
        <div class="weatherResponse">
            <img src="https://image.ibb.co/mtn0Be/sun_rays_small_cloud.png" alt="sun_rays_small_cloud" border="0"></a>
        </div>
    </body>
</html>


<hr />
<dl class="dl-horizontal">
    <dt>
        @Html.DisplayNameFor(model => model.Date)
    </dt>
    <dd>
        @Html.DisplayFor(model => model.Date)
    </dd>
    <dt>
        @Html.DisplayNameFor(model => model.Name)
    </dt>
    <dd>
        @Html.DisplayFor(model => model.Name)
    </dd>
    <dt>
        @Html.DisplayNameFor(model => model.Description)
    </dt>
    <dd>
        @Html.DisplayFor(model => model.Description)
    </dd>
    <dt>
        @Html.DisplayNameFor(model => model.Location)
    </dt>
    <dd>
        @Html.DisplayFor(model => model.Location)
    </dd>
    <dt>
        Public Event
    </dt>
    <dd>
        @Html.DisplayFor(model => model.PublicEvent)
    </dd>
    <dt>
        admin id
    </dt>
    <dd>
        @Html.DisplayFor(model => model.adminId)
    </dd>
</dl>
</div>
<!DOCTYPE html>
<html>
<body>
    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>

    <script>
        if ('@Model.YoutubeId') {
            // 2. This code loads the IFrame Player API code asynchronously.
            var tag = document.createElement('script');

            tag.src = "https://www.youtube.com/iframe_api";
            var firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

            // 3. This function creates an <iframe> (and YouTube player)
            //    after the API code downloads.
            var player;
            function onYouTubeIframeAPIReady() {
                player = new YT.Player('player', {
                    height: '390',
                    width: '640',
                    videoId: '@Model.YoutubeId',
                    events: {
                        'onReady': onPlayerReady,
                        'onStateChange': onPlayerStateChange
                    }
                });
            }

            // 4. The API will call this function when the video player is ready.
            function onPlayerReady(event) {
                event.target.playVideo();
            }

            // 5. The API calls this function when the player's state changes.
            //    The function indicates that when playing a video (state=1),
            //    the player should play for six seconds and then stop.
            var done = false;
            function onPlayerStateChange(event) {
                if (event.data == YT.PlayerState.PLAYING && !done) {
                    setTimeout(stopVideo, 6000);
                    done = true;
                }
            }
            function stopVideo() {
                player.stopVideo();
            }
        }
    </script>
</body>
</html>
<hr />

<!DOCTYPE html>
<html>
<head>
    <title>Place Details</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <style>
        /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
        #map {
            height: 20%;
            width: 20%;
        }
        /* Optional: Makes the sample page fill the window. */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
    <script>
        var Ireland = "@Model.Location";


        function initMap() {
            geocoder = new google.maps.Geocoder();
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 31.9730, lng: 34.7925 },
                zoom: 11
            });
            infoWindow = new google.maps.InfoWindow;

            // Try HTML5 geolocation.
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
             //       map.setCenter(pos);
                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }
            codeAddress(Ireland);
        }
        function codeAddress(address) {
            geocoder.geocode({ address: address }, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    map.setCenter(results[0].geometry.location);//center the map over the result
                    //place a marker at the location
                    var marker = new google.maps.Marker(
                        {
                            map: map,
                            position: results[0].geometry.location
                        });
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }
    </script>
</head>
<body>
    <div id="map"></div>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDsvW_m-KGkncYwDi1LGD32XEcQF5L9Bag&libraries=places&callback=initMap">
    </script>
</body>
</html>




<div class="page-header">
    Share<img src="https://image.ibb.co/bHc89e/facebook_1.png" alt="facebook_1" border="0">

</div>
<p>Click the button below to share this event on facebook</p>

<div id="shareBtn" class="btn btn-success clearfix">Share</div>

@*<p style="margin-top: 50px">
      <hr />
      <a class="btn btn-small"  href="https://developers.facebook.com/docs/sharing/reference/share-dialog">Share Dialog Documentation</a>
    </p>*@
<script>
    document.getElementById('shareBtn').onclick = function () {
        FB.ui({
            method: 'share',
            display: 'popup',
            href: 'https://developers.facebook.com/docs/',
        }, function (response) { });
    }
</script>


<script>
    window.fbAsyncInit = function () {
        FB.init({
            appId: 738916466500294,
            autoLogAppEvents: true,
            xfbml: true,
            version: 'v3.1'
        });
    };

    (function (d, s, id) {
        var js, fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) { return; }
        js = d.createElement(s); js.id = id;
        js.src = "https://connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));
</script>

<hr />

<div>
    <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>

